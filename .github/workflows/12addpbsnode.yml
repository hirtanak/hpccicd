name: 12addpbsnode
on:
  workflow_run:
    workflows: ["01azure_deploy"]
    branches: [main]
    types:
      - completed
  push:
    paths:
      - senarios/pbsdeploy

jobs:
  pbs_deploy:
    runs-on: ubuntu-latest
    # 呼び元のworkflowの結果が success であればジョブを実行
    # 11checkpingpong が成功すれば 12addpbsnode を実施する
    # if: ${{ github.event.workflow_run.conclusion == 'success' }}
    # on.push.paths と on.push.branch の && は利用できないため回避策
    if: github.ref == 'refs/heads/main'
    env:
      MyResourceGroup: tmcbmgt01-hpccicd01
      VMPREFIX: hpccicd01
      # secret
      AZURE_NAME: ${{ secrets.AZURE_NAME }}
      AZURE_PASSWORD: ${{ secrets.AZURE_PASSWORD }}
      AZURE_TENANT: ${{ secrets.AZURE_TENANT }}
      SSH_SECRET_KEY: ${{ secrets.SSH_SECRET_KEY }}
      SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
    steps:
      # スクリプト実行には事前にリポジトリのチェックアウトが必要
      - name: Check out repository
        uses: actions/checkout@v2

      - name: "prep run script1"
        run: |
          echo "RG: ${MyResourceGroup}"
          echo "VMPREFIX: ${VMPREFIX}"

          # check environment
          uname -a
          cat /etc/debian_version
          echo "GITHUB_ENV: $GITHUB_ENV"
          # actだと必要。github actionsだとPermissionエラーになる
          #sudo apt-get -qq update
          #sudo apt-get -qq -y install libxml2-utils curl openssh-server
          #apt-get -qq -y install curl openssh-server || sudo apt-get -qq -y install curl openssh-server
          curl -V
          # curl -sL https://aka.ms/InstallAzureCLIDeb | bash
          # github actions だとsudoが必要
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          az version -o table

      - name: "run script"
        env:
          SSH_SECRET_KEY: ${{ secrets.SSH_SECRET_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
        run: |
          # 設定ファイル変更反映
          bash ./setupcreds.sh hpcbmtenv.sh

          # SSH秘密鍵の設定
          echo "setting ssh private key...."
          echo "$SSH_SECRET_KEY" > ./${VMPREFIX}
          md5sum ./${VMPREFIX}

          # SSH公開鍵の設定
          echo "setting ssh public key...."
          echo "$SSH_PUBLIC_KEY" > ./${VMPREFIX}.pub
          md5sum ./${VMPREFIX}.pub

          grep "MyResourceGroup=" ./hpcbmtenv.sh | head -n 1
          grep "VMPREFIX=" ./hpcbmtenv.sh | head -n 1
          grep "MAXVM=" ./hpcbmtenv.sh | head -n 1
          grep "azure_*" ./hpcbmtenv.sh  | head -n 2

          # クルデンシャル
          sed -i -e 's!^#azure_name="uuid"!azure_name="${{ secrets.AZURE_NAME }}"!' ./hpcbmtenv.sh
          sed -i -e 's!^#azure_password="uuid"!azure_password="${{ secrets.AZURE_PASSWORD }}"!' ./hpcbmtenv.sh
          sed -i -e 's!^#azure_tenant="uuid"!azure_tenant="${{ secrets.AZURE_TENANT }}"!' ./hpcbmtenv.sh

          # スクリプト実行：PBS環境構築
          bash ./hpcbmtenv.sh updatensg          
          bash ./hpcbmtenv.sh addlogin

      - name: Create file status_pbs_deploy.txt and write the job status into it
        if: always()
        run: |
          echo ${{ job.status }} > status_pbs_deploy.txt

      - name: Upload file status_job01.txt as an artifact
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: pass_status_pbs_deploy
          path: status_pbs_deploy.txt

  pbs_configure:
    runs-on: ubuntu-latest
    needs: pbs_deploy
    env:
      MyResourceGroup: tmcbmgt01-hpccicd01
      VMPREFIX: hpccicd01
      # secret
      AZURE_NAME: ${{ secrets.AZURE_NAME }}
      AZURE_PASSWORD: ${{ secrets.AZURE_PASSWORD }}
      AZURE_TENANT: ${{ secrets.AZURE_TENANT }}
      SSH_SECRET_KEY: ${{ secrets.SSH_SECRET_KEY }}
      SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
    steps:
      # スクリプト実行には事前にリポジトリのチェックアウトが必要
      - name: Check out repository
        uses: actions/checkout@v2

      - name: "prep run script1"
        run: |
          echo "RG: ${MyResourceGroup}"
          echo "VMPREFIX: ${VMPREFIX}"

          # check environment
          uname -a
          cat /etc/debian_version
          echo "GITHUB_ENV: $GITHUB_ENV"
          # actだと必要。github actionsだとPermissionエラーになる
          #sudo apt-get -qq update
          #sudo apt-get -qq -y install libxml2-utils curl openssh-server
          #apt-get -qq -y install curl openssh-server || sudo apt-get -qq -y install curl openssh-server
          curl -V
          # curl -sL https://aka.ms/InstallAzureCLIDeb | bash
          # github actions だとsudoが必要
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          az version -o table

      - name: "run script"
        env:
          SSH_SECRET_KEY: ${{ secrets.SSH_SECRET_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
        run: |
          # 設定ファイル変更反映: pbs_configureの場合、hpcbmtenv.sh, pbssetting.sh 両方必要
          bash ./setupcreds.sh hpcbmtenv.sh
          bash ./setupcreds.sh pbssetting.sh

          # SSH秘密鍵の設定
          echo "setting ssh private key...."
          echo "$SSH_SECRET_KEY" > ./${VMPREFIX}
          md5sum ./${VMPREFIX}

          # SSH公開鍵の設定
          echo "setting ssh public key...."
          echo "$SSH_PUBLIC_KEY" > ./${VMPREFIX}.pub
          md5sum ./${VMPREFIX}.pub

          grep "MyResourceGroup=" ./pbssetting.sh | head -n 1
          grep "VMPREFIX=" ./pbssetting.sh | head -n 1
          grep "MAXVM=" ./pbssetting.sh | head -n 1
          grep "azure_*" ./pbssetting.sh  | head -n 2

          # クルデンシャル
          sed -i -e 's!^#azure_name="uuid"!azure_name="${{ secrets.AZURE_NAME }}"!' ./hpcbmtenv.sh
          sed -i -e 's!^#azure_password="uuid"!azure_password="${{ secrets.AZURE_PASSWORD }}"!' ./hpcbmtenv.sh
          sed -i -e 's!^#azure_tenant="uuid"!azure_tenant="${{ secrets.AZURE_TENANT }}"!' ./hpcbmtenv.sh
          sed -i -e 's!^#azure_name="uuid"!azure_name="${{ secrets.AZURE_NAME }}"!' ./pbssetting.sh
          sed -i -e 's!^#azure_password="uuid"!azure_password="${{ secrets.AZURE_PASSWORD }}"!' ./pbssetting.sh
          sed -i -e 's!^#azure_tenant="uuid"!azure_tenant="${{ secrets.AZURE_TENANT }}"!' ./pbssetting.sh

          # スクリプト実行：PBS環境設定
          bash ./hpcbmtenv.sh updatensg
          bash ./pbssetting.sh

      - name: Create file status_pbs_config.txt and write the job status into it
        if: always()
        run: |
          echo ${{ job.status }} > status_pbs_config.txt

      - name: Upload file status_job02.txt as an artifact
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: pass_status_pbs_config
          path: status_pbs_config.txt
          
  success:
    name: pbs_deploy-success_teams_notification
    runs-on: ubuntu-18.04
    needs: [pbs_deploy]
    steps:
      - uses: actions/checkout@master
      - name: Microsoft Teams Notification
        uses: skitionek/notify-microsoft-teams@master
        with:
          webhook_url: ${{ secrets.MSTEAMS_WEBHOOK }}
          needs: ${{ toJson(needs) }}
          job: ${{ toJson(job) }}
          steps: ${{ toJson(steps) }}
          dry_run: False
      - name: sucuess! 
        run: |
          echo '::success::pbs_deploy was sucuess!'

  setup_failure:
    name: setup_failure
    runs-on: ubuntu-latest
    needs: pbs_deploy
    steps:
      - name: setup_failure
        uses: actions/checkout@v2
      - name: dummy
        run: uname -a

  deploy_failure:
    name: pbs_deploy-failure_teams_notification
    runs-on: ubuntu-latest
    needs: setup_failure
    if: always()
    outputs:
      status_pbs_deploy: ${{ steps.set_outputs_pbs.outputs.status_pbs_deploy }}
    steps:
      - uses: actions/checkout@master

      - name: Download artifact pass_status_pbs_deploy
        uses: actions/download-artifact@v1
        with:
          name: pass_status_pbs_deploy

      - name: Set the statuses of pbs_deploy as output parameters
        id: set_outputs_pbs
        run: |
          echo "::set-output name=status_pbs_deploy::$(<pass_status_pbs_deploy/status_pbs_deploy.txt)"
          echo "::set-output name=pass_status_pbs_deploy::$(<pass_status_pbs_deploy/status_pbs_deploy.txt)"
      - name: check_failure
        if: steps.set_outputs_pbs.outputs.status_pbs_deploy == 'failure'
        run: |
            echo "steps.set_outputs_pbs.outputs.status_pbs_deploy: ${{ steps.set_outputs_pbs.outputs.status_pbs_deploy }}"
            exit 1
      - name: Microsoft Teams Notification
        uses: skitionek/notify-microsoft-teams@master
        if: failure()
        with:
          webhook_url: ${{ secrets.MSTEAMS_WEBHOOK }}
          needs: ${{ toJson(needs) }}
          job: ${{ toJson(job) }}
          steps: ${{ toJson(steps) }}        
          dry_run: False

  success2:
    name: pbs_configure-success_teams_notification
    runs-on: ubuntu-18.04
    needs: [pbs_configure]
    steps:
      - uses: actions/checkout@master
      - name: Microsoft Teams Notification
        uses: skitionek/notify-microsoft-teams@master
        with:
          webhook_url: ${{ secrets.MSTEAMS_WEBHOOK }}
          needs: ${{ toJson(needs) }}
          job: ${{ toJson(job) }}
          steps: ${{ toJson(steps) }}
          dry_run: False
      - name: sucuess! 
        run: |
          echo '::success::pbs_configure was sucuess!'

  setup_failure2:
    name: setup_failure
    runs-on: ubuntu-latest
    needs: pbs_configure
    steps:
      - name: setup_failure
        uses: actions/checkout@v2
      - name: dummy
        run: uname -a

  deploy_failure2:
    name: pbs_configure-failure_teams_notification
    runs-on: ubuntu-latest
    needs: setup_failure2
    if: always()
    outputs:
      status_pbs_config: ${{ steps.set_outputs_pbs2.outputs.status_pbs_config }}
    steps:
      - uses: actions/checkout@master

      - name: Download artifact pass_status_pbs_config
        uses: actions/download-artifact@v1
        with:
          name: pass_status_pbs_config

      - name: Set the statuses of pbs_configure as output parameters
        id: set_outputs_pbs2
        run: |
          echo "::set-output name=status_pbs_config::$(<pass_status_pbs_config/status_pbs_config.txt)"
          echo "::set-output name=pass_status_pbs_config::$(<pass_status_pbs_config/status_pbs_config.txt)"
      - name: check_failure - pbs_configure
        if: steps.set_outputs_pbs2.outputs.status_pbs_config == 'failure'
        run: |
            echo "steps.set_outputs_pbs2.outputs.status_pbs_config: ${{ steps.set_outputs_pbs2.outputs.status_pbs_config }}"
            exit 1
      - name: Microsoft Teams Notification
        uses: skitionek/notify-microsoft-teams@master
        if: failure()
        with:
          webhook_url: ${{ secrets.MSTEAMS_WEBHOOK }}
          needs: ${{ toJson(needs) }}
          job: ${{ toJson(job) }}
          steps: ${{ toJson(steps) }}        
          dry_run: False

  add_label:
    runs-on: ubuntu-latest
    needs: [success2]
    steps:
      - uses: actions/checkout@master
      - name: Download artifact pass_status_cardid
        uses: actions/download-artifact@v1
        with:
          name: pass_status_cardid
          path: status_cardid.txt

      - name: Set the statuses of pingpong as output parameters
        id: set_outputs_cardid
        run: |
          echo "::set-output name=status_cardid::$(<pass_status_cardid/status_cardid.txt)"

      - name: Add label
        uses: actions-ecosystem/action-add-labels@v1
        with:
          labels: |
            azurewf01
            01a_done
            02p_done
          number: ${{ steps.set_outputs_cardid.outputs.status_cardid }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
