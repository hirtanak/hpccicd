name: 12addpbsnode
on:
  workflow_run:
    workflows: ["01azure_deploy"]
    branches: [main]
    types:
      - completed
  push:
    branches: [main]
    paths:
      - senarios/pbsdeploy

jobs:
  pbs_deploy:
    runs-on: ubuntu-latest
    # 呼び元のworkflowの結果が success であればジョブを実行
    # 11checkpingpong が成功すれば 12addpbsnode を実施する
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    env:
      MyResourceGroup: tmcbmgt01-hpccicd01
      VMPREFIX: hpccicd01
      # secret
      AZURE_NAME: ${{ secrets.AZURE_NAME }}
      AZURE_PASSWORD: ${{ secrets.AZURE_PASSWORD }}
      AZURE_TENANT: ${{ secrets.AZURE_TENANT }}
      SSH_SECRET_KEY: ${{ secrets.SSH_SECRET_KEY }}
      SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
    steps:
      # スクリプト実行には事前にリポジトリのチェックアウトが必要
      - name: Check out repository
        uses: actions/checkout@v2

      - name: "prep run script1"
        run: |
          echo "RG: ${MyResourceGroup}"
          echo "VMPREFIX: ${VMPREFIX}"

          # check environment
          uname -a
          cat /etc/debian_version
          echo "GITHUB_ENV: $GITHUB_ENV"
          # actだと必要。github actionsだとPermissionエラーになる
          #sudo apt-get -qq update
          #sudo apt-get -qq -y install libxml2-utils curl openssh-server
          #apt-get -qq -y install curl openssh-server || sudo apt-get -qq -y install curl openssh-server
          curl -V
          # curl -sL https://aka.ms/InstallAzureCLIDeb | bash
          # github actions だとsudoが必要
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          az version -o table

      - name: "run script"
        env:
          SSH_SECRET_KEY: ${{ secrets.SSH_SECRET_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
        run: |
          # 設定ファイル変更反映
          bash ./setupcreds.sh hpcbmtenv.sh

          # SSH秘密鍵の設定
          echo "setting ssh private key...."
          echo "$SSH_SECRET_KEY" > ./${VMPREFIX}
          md5sum ./${VMPREFIX}

          # SSH公開鍵の設定
          echo "setting ssh public key...."
          echo "$SSH_PUBLIC_KEY" > ./${VMPREFIX}.pub
          md5sum ./${VMPREFIX}.pub

          grep "MyResourceGroup=" ./hpcbmtenv.sh | head -n 1
          grep "VMPREFIX=" ./hpcbmtenv.sh | head -n 1
          grep "MAXVM=" ./hpcbmtenv.sh | head -n 1
          grep "azure_*" ./hpcbmtenv.sh  | head -n 3

          # クルデンシャル
          sed -i -e 's!^#azure_name="uuid"!azure_name="${{ secrets.AZURE_NAME }}"!' ./hpcbmtenv.sh
          sed -i -e 's!^#azure_password="uuid"!azure_password="${{ secrets.AZURE_PASSWORD }}"!' ./hpcbmtenv.sh
          sed -i -e 's!^#azure_tenant="uuid"!azure_tenant="${{ secrets.AZURE_TENANT }}"!' ./hpcbmtenv.sh

          # スクリプト実行：PBS環境構築
          bash ./hpcbmtenv.sh updatensg          
          bash ./hpcbmtenv.sh addlogin

  pbs_configure:
    runs-on: ubuntu-latest
    needs: pbs_deploy
    # 呼び元のworkflowの結果が success であればジョブを実行
    # 12addpbsnode が成功すれば 13pbssetting を実施する
    #if: ${{ github.event.workflow_run.conclusion == 'success' }}
    env:
      MyResourceGroup: tmcbmgt01-hpccicd01
      VMPREFIX: hpccicd01
      # secret
      AZURE_NAME: ${{ secrets.AZURE_NAME }}
      AZURE_PASSWORD: ${{ secrets.AZURE_PASSWORD }}
      AZURE_TENANT: ${{ secrets.AZURE_TENANT }}
      SSH_SECRET_KEY: ${{ secrets.SSH_SECRET_KEY }}
      SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
    steps:
      # スクリプト実行には事前にリポジトリのチェックアウトが必要
      - name: Check out repository
        uses: actions/checkout@v2

      - name: "prep run script1"
        run: |
          echo "RG: ${MyResourceGroup}"
          echo "VMPREFIX: ${VMPREFIX}"

          # check environment
          uname -a
          cat /etc/debian_version
          echo "GITHUB_ENV: $GITHUB_ENV"
          # actだと必要。github actionsだとPermissionエラーになる
          #sudo apt-get -qq update
          #sudo apt-get -qq -y install libxml2-utils curl openssh-server
          #apt-get -qq -y install curl openssh-server || sudo apt-get -qq -y install curl openssh-server
          curl -V
          # curl -sL https://aka.ms/InstallAzureCLIDeb | bash
          # github actions だとsudoが必要
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          az version -o table

      - name: "run script"
        env:
          SSH_SECRET_KEY: ${{ secrets.SSH_SECRET_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
        run: |
          # 設定ファイル変更反映
          bash ./setupcreds.sh hpcbmtenv.sh

          # SSH秘密鍵の設定
          echo "setting ssh private key...."
          echo "$SSH_SECRET_KEY" > ./${VMPREFIX}
          md5sum ./${VMPREFIX}

          # SSH公開鍵の設定
          echo "setting ssh public key...."
          echo "$SSH_PUBLIC_KEY" > ./${VMPREFIX}.pub
          md5sum ./${VMPREFIX}.pub

          grep "MyResourceGroup=" ./pbssetting.sh | head -n 1
          grep "VMPREFIX=" ./pbssetting.sh | head -n 1
          grep "MAXVM=" ./pbssetting.sh | head -n 1
          grep "azure_*" ./pbssetting.sh  | head -n 3

          # クルデンシャル
          sed -i -e 's!^#azure_name="uuid"!azure_name="${{ secrets.AZURE_NAME }}"!' ./pbssetting.sh
          sed -i -e 's!^#azure_password="uuid"!azure_password="${{ secrets.AZURE_PASSWORD }}"!' ./pbssetting.sh
          sed -i -e 's!^#azure_tenant="uuid"!azure_tenant="${{ secrets.AZURE_TENANT }}"!' ./pbssetting.sh

          # スクリプト実行：PBS環境設定
          bash ./hpcbmtenv.sh updatensg
          bash ./pbssetting.sh

  testjob:
    name: testjob
    runs-on: ubuntu-latest
    steps:
      - name: Getting azure_deploy result
        uses: actions/checkout@master
      - run: |
          WORKFLOW_CONCLUSION="failure"

  testjob2:
    name: testjob2
    needs: testjob
    runs-on: ubuntu-latest
    steps:
      - name: Getting azure_deploy result
        uses: actions/checkout@master
      - run: |
          WORKFLOW_CONCLUSIONasdasdas
          
  success:
    name: pbs-success_teams_notification
    runs-on: ubuntu-18.04
    needs: [testjob2]
    steps:
      - uses: actions/checkout@master
      - name: Microsoft Teams Notification
        uses: skitionek/notify-microsoft-teams@master
        if: env.WORKFLOW_CONCLUSION == 'success' # notify only if failure
        with:
          webhook_url: ${{ secrets.MSTEAMS_WEBHOOK }}
          needs: ${{ toJson(needs) }}
          job: ${{ toJson(job) }}
          steps: ${{ toJson(steps) }}
          dry_run: False
      - name: sucuess! 
        run: |
          echo '::success::Previous workflow was sucuess!'

  if_failure:
    name: pbs-failure_teams_notification
    runs-on: ubuntu-18.04
    # 失敗の場合、通知送付
    if: always() # set always
    steps:
      # job azure_deploy の結果を得る
      - name: Getting azure_deploy result
        uses: technote-space/workflow-conclusion-action@v2
      - run: |
          echo "env.WORKFLOW_CONCLUSION"
          echo ${{ env.WORKFLOW_CONCLUSION }}
      - uses: actions/checkout@master
      - name: Microsoft Teams Notification
        uses: skitionek/notify-microsoft-teams@master
        if: env.WORKFLOW_CONCLUSION == 'failure' # notify only if failure
        #if: ${{ failure() }}
        with:
          webhook_url: ${{ secrets.MSTEAMS_WEBHOOK }}
          needs: ${{ toJson(needs) }}
          job: ${{ toJson(job) }}
          steps: ${{ toJson(steps) }}        
          dry_run: False
        env: 
          env.WORKFLOW_CONCLUSION: ${{ env.WORKFLOW_CONCLUSION }}
