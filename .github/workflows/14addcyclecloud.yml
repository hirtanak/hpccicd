name: 14addcyclecloud
on:
  workflow_run:
    workflows: ["12addpbsnode"]
    branches: [main]
    types:
      - completed
  push:
    paths:
      - senarios/cyclecloud


jobs:
  cyclecloud_deploy:
    runs-on: ubuntu-latest
    # on.push.paths と on.push.branch の && は利用できないため回避策
    if: github.ref == 'refs/heads/main'
    env:
      MyResourceGroup: tmcbmgt01-hpccicd01
      VMPREFIX: hpccicd01
      # secret
      AZURE_NAME: ${{ secrets.AZURE_NAME }}
      AZURE_PASSWORD: ${{ secrets.AZURE_PASSWORD }}
      AZURE_TENANT: ${{ secrets.AZURE_TENANT }}
      SSH_SECRET_KEY: ${{ secrets.SSH_SECRET_KEY }}
      SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
    # Map a step output to a job output
    outputs:
      output1: ${{ steps.step1.outputs.test }}
      output2: ${{ steps.step2.outputs.test }}
      output3: ${{ steps.step3.outputs.test }}
    steps:
      # スクリプト実行には事前にリポジトリのチェックアウトが必要
      - name: Check out repository
        uses: actions/checkout@v2

      - name: "prep run script1"
        run: |
          echo "RG: ${MyResourceGroup}"
          echo "VMPREFIX: ${VMPREFIX}"

          # check environment
          uname -a
          cat /etc/debian_version
          echo "GITHUB_ENV: $GITHUB_ENV"
          # actだと必要。github actionsだとPermissionエラーになる
          #sudo apt-get -qq update
          #sudo apt-get -qq -y install libxml2-utils curl openssh-server
          #apt-get -qq -y install curl openssh-server || sudo apt-get -qq -y install curl openssh-server
          curl -V
          # curl -sL https://aka.ms/InstallAzureCLIDeb | bash
          # github actions だとsudoが必要
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          az version -o table

      - name: "run script: add cyclecloud"
        env:
          SSH_SECRET_KEY: ${{ secrets.SSH_SECRET_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
        run: |
          # 設定ファイル変更反映: addcyclecloud.shの場合、hpcbmtenv.sh, addcyclecloud.sh, cyc.sh 3つ必要
          bash ./setupcreds.sh hpcbmtenv.sh
          bash ./setupcreds.sh addcyclecloud.sh
          bash ./setupcreds.sh cyclesetting.sh

          # SSH秘密鍵の設定
          echo "setting ssh private key...."
          echo "$SSH_SECRET_KEY" > ./${VMPREFIX}
          md5sum ./${VMPREFIX}

          # SSH公開鍵の設定
          echo "setting ssh public key...."
          echo "$SSH_PUBLIC_KEY" > ./${VMPREFIX}.pub
          md5sum ./${VMPREFIX}.pub

          grep "MyResourceGroup=" ./addcyclecloud.sh | head -n 1
          grep "VMPREFIX=" ./addcyclecloud.sh | head -n 1
          grep "azure_*" ./addcyclecloud.sh  | head -n 2

          # クルデンシャル
          sed -i -e 's!^#azure_name="uuid"!azure_name="${{ secrets.AZURE_NAME }}"!' ./hpcbmtenv.sh
          sed -i -e 's!^#azure_password="uuid"!azure_password="${{ secrets.AZURE_PASSWORD }}"!' ./hpcbmtenv.sh
          sed -i -e 's!^#azure_tenant="uuid"!azure_tenant="${{ secrets.AZURE_TENANT }}"!' ./hpcbmtenv.sh
          sed -i -e 's!^#azure_name="uuid"!azure_name="${{ secrets.AZURE_NAME }}"!' ./addcyclecloud.sh
          sed -i -e 's!^#azure_password="uuid"!azure_password="${{ secrets.AZURE_PASSWORD }}"!' ./addcyclecloud.sh
          sed -i -e 's!^#azure_tenant="uuid"!azure_tenant="${{ secrets.AZURE_TENANT }}"!' ./addcyclecloud.sh
          sed -i -e 's!^#azure_name="uuid"!azure_name="${{ secrets.AZURE_NAME }}"!' ./cyclesetting.sh
          sed -i -e 's!^#azure_password="uuid"!azure_password="${{ secrets.AZURE_PASSWORD }}"!' ./cyclesetting.sh
          sed -i -e 's!^#azure_tenant="uuid"!azure_tenant="${{ secrets.AZURE_TENANT }}"!' ./cyclesetting.sh

          # Update NSG
          bash ./hpcbmtenv.sh updatensg
          # Azure CycleCloud 構築
          echo "create cyclecloud..."
          bash ./addcyclecloud.sh
          # Azure CycleCloud 設定
          echo "postinstall cyclecloud setting..."
          bash ./cyclesetting.sh

      - name: Create file status_cyclecloud.txt and write the job status into it
        if: always()
        run: |
          echo ${{ job.status }} > status_cyclecloud.txt

      - name: Upload file status_cyclecloud.txt as an artifact
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: pass_status_cyclecloud
          path: status_cyclecloud.txt

  success:
    name: cyclecloud-success_teams_notification
    runs-on: ubuntu-18.04
    needs: [cyclecloud_deploy]
    steps:
      - uses: actions/checkout@master
      - name: Microsoft Teams Notification
        uses: skitionek/notify-microsoft-teams@master
        with:
          webhook_url: ${{ secrets.MSTEAMS_WEBHOOK }}
          needs: ${{ toJson(needs) }}
          job: ${{ toJson(job) }}
          steps: ${{ toJson(steps) }}
          dry_run: False
      - name: sucuess! 
        run: |
          echo '::success::cyclecloud_deploy(and config) was sucuess!'

  setup_failure:
    name: setup_failure
    runs-on: ubuntu-latest
    needs: cyclecloud_deploy
    steps:
      - name: setup_failure
        uses: actions/checkout@v2
      - name: dummy
        run: uname -a

  deploy_failure:
    name: cyclecloud-failure_teams_notification
    runs-on: ubuntu-latest
    needs: setup_failure
    if: always()
    outputs:
      status_cyclecloud: ${{ steps.set_outputs_cyclecloud.outputs.status_cyclecloud }}
    steps:
      - uses: actions/checkout@master

      - name: Download artifact pass_status_cyclecloud
        uses: actions/download-artifact@v1
        with:
          name: pass_status_cyclecloud

      - name: Set the statuses of cyclecloud as output parameters
        id: set_outputs_cyclecloud
        run: |
          echo "::set-output name=status_cyclecloud::$(<pass_status_cyclecloud/status_cyclecloud.txt)"
          echo "::set-output name=pass_status_cyclecloud::$(<pass_status_cyclecloud/status_cyclecloud.txt)"
      - name: check_failure
        if: steps.set_outputs_cyclecloud.outputs.status_cyclecloud == 'failure'
        run: |
            echo "steps.set_outputs_cyclecloud.outputs.status_cyclecloud: ${{ steps.set_outputs_cyclecloud.outputs.status_cyclecloud }}"
            exit 1
      - name: Microsoft Teams Notification
        uses: skitionek/notify-microsoft-teams@master
        if: failure()
        with:
          webhook_url: ${{ secrets.MSTEAMS_WEBHOOK }}
          needs: ${{ toJson(needs) }}
          job: ${{ toJson(job) }}
          steps: ${{ toJson(steps) }}        
          dry_run: False

  add_label:
    runs-on: ubuntu-latest
    needs: [success]
    steps:
      - uses: actions/checkout@master
      - name: Download artifact pass_status_pingpong
        uses: actions/download-artifact@v1
        with:
          name: pass_status_cardid

      - name: Set the statuses of pingpong as output parameters
        id: set_outputs_cardid
        run: |
          echo "::set-output name=status_cardid::$(<pass_status_cardid/status_cardid.txt)"

      - name: Add label
        uses: actions-ecosystem/action-add-labels@v1
        with:
          labels: |
            azuredeploytest
            01azure_done
            02pbs_done
          number: ${{ steps.set_outputs_cardid.outputs.status_cardid }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}