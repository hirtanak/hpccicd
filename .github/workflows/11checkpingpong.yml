name: 11checkpingpong
on:
#  workflow_run:
#    workflows: ["01azure_deploy"]
#    branches: [main]
#    types: 
#      - completed
  push:
    branches: [main]
    paths:
      - senarios/pingpong

jobs:

  pingpong:
    runs-on: ubuntu-latest
    # 呼び元のworkflowの結果が success であればジョブを実行
    # 01azure_deployが成功すれば 11checkpingpong を実施する
    #if: ${{ github.event.workflow_run.conclusion == 'success' }}
    env:
      MyResourceGroup: tmcbmgt01-hpccicd01
      VMPREFIX: hpccicd01
      # secret
      AZURE_NAME: ${{ secrets.AZURE_NAME }}
      AZURE_PASSWORD: ${{ secrets.AZURE_PASSWORD }}
      AZURE_TENANT: ${{ secrets.AZURE_TENANT }}
      SSH_SECRET_KEY: ${{ secrets.SSH_SECRET_KEY }}
      SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}

    steps:
      # スクリプト実行には事前にリポジトリのチェックアウトが必要
      - name: Check out repository
        uses: actions/checkout@v2

      - name: "prep run script1"
        run: |
          echo "RG: ${MyResourceGroup}"
          echo "VMPREFIX: ${VMPREFIX}"

          # check environment
          uname -a
          cat /etc/debian_version
          echo "GITHUB_ENV: $GITHUB_ENV"
          # actだと必要。github actionsだとPermissionエラーになる
          #sudo apt-get -qq update
          #sudo apt-get -qq -y install libxml2-utils curl openssh-server
          #apt-get -qq -y install curl openssh-server || sudo apt-get -qq -y install curl openssh-server
          curl -V
          # curl -sL https://aka.ms/InstallAzureCLIDeb | bash
          # github actions だとsudoが必要
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          az version -o table

      - name: "run script"
        env:
          SSH_SECRET_KEY: ${{ secrets.SSH_SECRET_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
        run: |
          # 設定ファイル変更反映
          bash ./setupcreds.sh hpcbmtenv.sh

          # SSH秘密鍵の設定
          echo "setting ssh private key...."
          echo "$SSH_SECRET_KEY" > ./${VMPREFIX}
          md5sum ./${VMPREFIX}

          # SSH公開鍵の設定
          echo "setting ssh public key...."
          echo "$SSH_PUBLIC_KEY" > ./${VMPREFIX}.pub
          md5sum ./${VMPREFIX}.pub

          grep "MyResourceGroup=" ./hpcbmtenv.sh | head -n 1
          grep "VMPREFIX=" ./hpcbmtenv.sh | head -n 1
          grep "MAXVM=" ./hpcbmtenv.sh | head -n 1
          grep "azure_*" ./hpcbmtenv.sh  | head -n 2

          # クルデンシャル
          sed -i -e 's!^#azure_name="uuid"!azure_name="${{ secrets.AZURE_NAME }}"!' ./hpcbmtenv.sh
          sed -i -e 's!^#azure_password="uuid"!azure_password="${{ secrets.AZURE_PASSWORD }}"!' ./hpcbmtenv.sh
          sed -i -e 's!^#azure_tenant="uuid"!azure_tenant="${{ secrets.AZURE_TENANT }}"!' ./hpcbmtenv.sh
          
          # スクリプト実行：作成
          bash ./hpcbmtenv.sh updatensg
          bash ./hpcbmtenv.sh pingpong

          if [ ! -f ./result ]; then
            echo "::error:: error result file is not found!"
            exit 1
          fi
          cp ./result ./result.txt

      - name: Upload test result
        uses: actions/upload-artifact@v2.2.3
        if: always() # 上記が失敗した場合、デフォルトだと exit 1 でステップが実行されない。 alwaysで実施
        with:
          name: result.txt
          path: result.txt

      # 作成された issue をプロジェクトに自動登録
      - name: Creating issue on checkperformance in the project
        uses: imjohnbo/issue-bot@v3.3.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          title: Check MPI pingpong - ${{ steps.date.outputs.date }}
          assignees: "hirtanak"
          labels: "azuredeploytest"
          project: 1 # project01, number is 1
          column: "checkperformance"
          milestone: 1
          body: |-
            :wave: Hi,
            cat ./result.txt
          # {{#each assignees}}@{{this}}{{#unless @last}}, {{/unless}}{{/each}}!        
          pinned: false
          close-previous: false

      # Teamに通知
      - name: Microsoft Teams Notification
        uses: skitionek/notify-microsoft-teams@master
        if: always()
        with:
          webhook_url: ${{ secrets.MSTEAMS_WEBHOOK }}
          needs: ${{ toJson(needs) }}
          job: ${{ toJson(job) }}
          steps: ${{ toJson(steps) }}
          dry_run: False

  websitebuilddeploy:
    runs-on: ubuntu-latest
    needs: pingpong
    #if: "!contains(github.event.head_commit.message, 'auto rebuilding site')"
    steps:
    - name: Checkout
      uses: actions/checkout@v2.3.4

    - name: Set up Python
      uses: actions/setup-python@v1
      with: 
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install cloud-sptheme
        pip install -r ./docs/requirements.txt
        pip install sphinx-autobuild

    - name: Set up result (Download)
      uses: actions/download-artifact@v2
      with:
        name: result.txt
        path: ./docs/result

    - name: Web Site Deploy Configuration
      run: |
          mkdir ~/.ssh
          ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
          echo "${{ secrets.SSH_SECRET_KEY }}" > ~/.ssh/id_rsa
          chmod 400 ~/.ssh/id_rsa

    - name: Web Site Push - delete
      env:
        GITHUB_USER: "hirtanak"
        GITHUB_EMAIL: "hirtanak@gmail.com"
        GITHUB_REPOSITORY: ${{ github.repository }}
      run: |
          wget -q https://raw.githubusercontent.com/hirtanak/hpccicd/gh-pages/docs/index.rst.original -O ./docs/index.rst.tmp
          git config --local user.name "${GITHUB_USER}"
          git config --local user.email "${GITHUB_EMAIL}"
          git remote set-url origin git@github.com:${GITHUB_REPOSITORY}.git
          # index.rst対策
          git rm -f ./docs/index.rst
          git commit -m "index.rst delete"
          git push -f origin HEAD:gh-pages

    - name: Web Site Build
      run: |
        ls -la ./
        mkdir -p ./docs ./docs/_build
        ls -la ./docs/
        #cp ./docs/index.rst.tmp ./docs/index.rst
        #logdate=$(date "+%Y%m%d_%H%M")
        cp ./docs/result/result.txt ./docs/result/result-${logdate}.rst
        ls -la ./docs/result/
        ###echo "   result/result-${logdate}.rst" >> ./docs/index.rst
        ###sed -i -e "$a "   result\/result-${logdate}.rst"" ./docs/index.rst
        ls result/* > ./docs/list
        # インデックスが重要なためスペース3つ分あけること。エコーの利用も問題あり。
        sed -i -e "/result\//s/^/   /g" ./docs/list
        cat ./docs/index.rst.tmp ./docs/list > ./docs/index.rst
        cat ./docs/index.rst
        # Build
        sphinx-build -E -b singlehtml ./docs/ docs/_build
        # Copy index.html to document root
        cp ./docs/_build/index.html ./docs/index.html

    - name: Web Site Push - update files
      env:
        GITHUB_USER: "hirtanak"
        GITHUB_EMAIL: "hirtanak@gmail.com"
        GITHUB_REPOSITORY: ${{ github.repository }}
      run: |
          git config --local user.name "${GITHUB_USER}"
          git config --local user.email "${GITHUB_EMAIL}"
          git remote set-url origin git@github.com:${GITHUB_REPOSITORY}.git
          git add ./docs/_build/*
          git add ./docs/index.html
          git add ./docs/index.rst
          git add ./docs/result/*
          git commit -m "pingpong: auto rebuilding site"
          git push -f origin HEAD:gh-pages