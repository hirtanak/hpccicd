name: 11checkpingpong
on:
#  workflow_run:
#    workflows: ["01azure_deploy"]
#    branches: [main]
#    types: 
#      - completed
  push:
    branches: [main]
    paths:
      - senarios/pingpong

jobs:

  pingpong:
    runs-on: ubuntu-latest
    # 呼び元のworkflowの結果が success であればジョブを実行
    # 01azure_deployが成功すれば 11checkpingpong を実施する
    #if: ${{ github.event.workflow_run.conclusion == 'success' }}
    if: github.ref == 'refs/heads/main'
    env:
      MyResourceGroup: tmcbmgt01-hpccicd01
      VMPREFIX: hpccicd01
      # secret
      AZURE_NAME: ${{ secrets.AZURE_NAME }}
      AZURE_PASSWORD: ${{ secrets.AZURE_PASSWORD }}
      AZURE_TENANT: ${{ secrets.AZURE_TENANT }}
      SSH_SECRET_KEY: ${{ secrets.SSH_SECRET_KEY }}
      SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}

    steps:
      # スクリプト実行には事前にリポジトリのチェックアウトが必要
      - name: Check out repository
        uses: actions/checkout@v2

      - name: "prep run script1"
        run: |
          echo "RG: ${MyResourceGroup}"
          echo "VMPREFIX: ${VMPREFIX}"

          # check environment
          uname -a
          cat /etc/debian_version
          echo "GITHUB_ENV: $GITHUB_ENV"
          # actだと必要。github actionsだとPermissionエラーになる
          #sudo apt-get -qq update
          #sudo apt-get -qq -y install libxml2-utils curl openssh-server
          #apt-get -qq -y install curl openssh-server || sudo apt-get -qq -y install curl openssh-server
          curl -V
          # curl -sL https://aka.ms/InstallAzureCLIDeb | bash
          # github actions だとsudoが必要
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          az version -o table

      - name: "run script"
        env:
          SSH_SECRET_KEY: ${{ secrets.SSH_SECRET_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
        run: |
          # 設定ファイル変更反映
          bash ./setupcreds.sh hpcbmtenv.sh

          # SSH秘密鍵の設定
          echo "setting ssh private key...."
          echo "$SSH_SECRET_KEY" > ./${VMPREFIX}
          md5sum ./${VMPREFIX}

          # SSH公開鍵の設定
          echo "setting ssh public key...."
          echo "$SSH_PUBLIC_KEY" > ./${VMPREFIX}.pub
          md5sum ./${VMPREFIX}.pub

          grep "MyResourceGroup=" ./hpcbmtenv.sh | head -n 1
          grep "VMPREFIX=" ./hpcbmtenv.sh | head -n 1
          grep "MAXVM=" ./hpcbmtenv.sh | head -n 1
          grep "azure_*" ./hpcbmtenv.sh  | head -n 2

          # クルデンシャル
          sed -i -e 's!^#azure_name="uuid"!azure_name="${{ secrets.AZURE_NAME }}"!' ./hpcbmtenv.sh
          sed -i -e 's!^#azure_password="uuid"!azure_password="${{ secrets.AZURE_PASSWORD }}"!' ./hpcbmtenv.sh
          sed -i -e 's!^#azure_tenant="uuid"!azure_tenant="${{ secrets.AZURE_TENANT }}"!' ./hpcbmtenv.sh
          
          # スクリプト実行：作成
          bash ./hpcbmtenv.sh updatensg
          bash ./hpcbmtenv.sh pingpong

          if [ ! -f ./result ]; then
            echo "::error:: error result file is not found!"
            exit 1
          fi
          cp ./result ./result.txt

      - name: Upload test result
        uses: actions/upload-artifact@v2.2.3
        if: always() # 上記が失敗した場合、デフォルトだと exit 1 でステップが実行されない。 alwaysで実施
        with:
          name: result.txt
          path: result.txt

      # 作成された issue をプロジェクトに自動登録
      - name: Creating issue on checkperformance in the project
        uses: imjohnbo/issue-bot@v3.3.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          title: Check MPI pingpong - ${{ steps.date.outputs.date }}
          assignees: "hirtanak"
          labels: "azuredeploytest"
          project: 1 # project01, number is 1
          column: "checkperformance"
          milestone: 1
          body: |-
            :wave: Hi,
            cat ./result.txt
          # {{#each assignees}}@{{this}}{{#unless @last}}, {{/unless}}{{/each}}!        
          pinned: false
          close-previous: false

      # Teamに通知
      - name: Microsoft Teams Notification
        uses: skitionek/notify-microsoft-teams@master
        if: always()
        with:
          webhook_url: ${{ secrets.MSTEAMS_WEBHOOK }}
          needs: ${{ toJson(needs) }}
          job: ${{ toJson(job) }}
          steps: ${{ toJson(steps) }}
          dry_run: False

      - name: Create file status_pingpong.txt and write the job status into it
        if: always()
        run: |
          echo ${{ job.status }} > status_pingpong.txt

      - name: Upload file status_pingpong.txt as an artifact
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: pass_status_pingpong
          path: status_pingpong.txt

  website_build-deploy:
    runs-on: ubuntu-latest
    needs: pingpong
    #if: "!contains(github.event.head_commit.message, 'auto rebuilding site')"
    steps:
    - name: Checkout
      uses: actions/checkout@v2.3.4

    - name: Set up Python
      uses: actions/setup-python@v1
      with: 
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install cloud-sptheme
        pip install -r ./docs/requirements.txt
        pip install sphinx-autobuild

    - name: Set up result (Download)
      uses: actions/download-artifact@v2
      with:
        name: result.txt
        path: ./docs/result

    - name: Web Site Deploy Configuration
      run: |
          mkdir ~/.ssh
          ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
          echo "${{ secrets.SSH_SECRET_KEY }}" > ~/.ssh/id_rsa
          chmod 400 ~/.ssh/id_rsa

    - name: Web Site Push - Long
      env:
        GITHUB_USER: "hirtanak"
        GITHUB_EMAIL: "hirtanak@gmail.com"
        GITHUB_REPOSITORY: ${{ github.repository }}
      run: |
        git config --local user.name "${GITHUB_USER}"
        git config --local user.email "${GITHUB_EMAIL}"
        git remote set-url origin git@github.com:${GITHUB_REPOSITORY}.git

        git checkout -b gh-pages
        git checkout origin/main -- .github/workflows/11checkpingpong.yml

        mkdir -p ./tmp/result/
        cp ./docs/result/* ./tmp/result/
        cp ./docs/index.rst.original ./tmp/index.rst.tmp
        cp ./docs/conf.py ./tmp/conf.py

        git rm -rf docs # 2.
        git commit -m "Removing old subtree"
        git subtree add --prefix docs origin gh-pages # 1

        # 削除するデータをわざわざ取得するのは冗長に思えるが、git subtree addはgh-pagesブランチへの追跡を行うため必ず実行されなければならない。
        # docs/が既に存在する場合はエラーになるため、あらかじめ削除しておくこと。
        # 出力先ディレクトリが既存かつ、TypeDocが生成しうるファイル以外のもの（この場合は.nojekyll）が存在するとTypeDocがエラーを起こすため、出力先ディレクトリを削除して後続のコマンドでドキュメントを再作成する。
        mkdir -p docs/result
        cp ./tmp/result/* ./docs/result/
        cp ./tmp/index.rst.tmp ./docs/index.rst.tmp
        cp ./tmp/conf.py ./docs/conf.py
        rm -rf ./tmp
        touch docs/.nojekyll
        #wget -q https://raw.githubusercontent.com/hirtanak/hpccicd/gh-pages/docs/index.rst.original -O ./docs/index.rst.tmp
        # cp ./docs/index.rst.original ./docs/index.rst.tmp

        echo "set up new result file"
        #cd ../
        ls -la ./
        mkdir -p ./docs ./docs/_build
        ls -la ./docs/
        unset logdate
        echo "before"
        ls -la ./docs/result/
        logdate=$(date "+%Y%m%d_%H%M")
        echo $logdate > ./logdate
        mv ./docs/result/result.txt ./docs/result/result-${logdate}.rst
        echo "after"
        ls -la ./docs/result/
        ls ./docs/result/* > ./docs/list
        # インデックスが重要なためスペース3つ分あけること
        sed -i -e "/result\//s/^/   /g" ./docs/list
        echo "show ./docs/list"
        cat ./docs/list
        # ./docs を削除
        sed -i -e "s/\.\/docs\/result/\/result/g" ./docs/list
        #    /result/result.rst を削除
        sed -i -e "/\/result\/result.rst/d" ./docs/list
        # sed, echo 以外でファイル統合
        cat ./docs/index.rst.tmp ./docs/list > ./docs/index.rst
        echo "show ./docs/index.rst"
        cat ./docs/index.rst
        rm ./docs/index.rst.tmp

        # Build
        sphinx-build -E -b singlehtml ./docs/ docs/_build
        # Copy index.html to document root
        #rm ./docs/index.html
        cp ./docs/_build/index.html ./docs/index.html
        #cp -rf ./docs/_build/* ./docs/
        cp -rf ./docs/_build ./

        git add docs --force
        git commit -m "auto build and upload"
        git subtree push --prefix docs origin gh-pages

  success:
    name: pingpong-success_teams_notification
    runs-on: ubuntu-18.04
    needs: [website_build-deploy]
    steps:
      - uses: actions/checkout@master
      - name: Microsoft Teams Notification
        uses: skitionek/notify-microsoft-teams@master
        with:
          webhook_url: ${{ secrets.MSTEAMS_WEBHOOK }}
          needs: ${{ toJson(needs) }}
          job: ${{ toJson(job) }}
          steps: ${{ toJson(steps) }}
          dry_run: False
      - name: sucuess! 
        run: |
          echo '::success::pingpong and wesite upload was sucuess!'

  setup_failure:
    name: setup_failure
    runs-on: ubuntu-latest
    needs: success
    steps:
      - name: setup_failure
        uses: actions/checkout@v2
      - name: dummy
        run: uname -a

  pingpong_failure:
    name: pingpong-failure_teams_notification
    runs-on: ubuntu-latest
    needs: setup_failure
    if: always()
    outputs:
      status_pongpong: ${{ steps.set_outputs_pingpong.outputs.status_pingpong }}
    steps:
      - uses: actions/checkout@master

      - name: Download artifact pass_status_pingpong
        uses: actions/download-artifact@v1
        with:
          name: pass_status_pingpong

      - name: Set the statuses of pingpong as output parameters
        id: set_outputs_pingpong
        run: |
          echo "::set-output name=status_pingpong::$(<pass_status_pingpong/status_pingpong.txt)"
          echo "::set-output name=pass_status_pingpong::$(<pass_status_pingpong/status_pingpong.txt)"
      - name: check_failure
        if: steps.set_outputs_pingpong.outputs.status_pingpong == 'failure'
        run: |
            echo "steps.set_outputs_pingpong.outputs.status_pingpong: ${{ steps.set_outputs_pingpong.outputs.status_pingpong }}"
            exit 1
      - name: Microsoft Teams Notification
        uses: skitionek/notify-microsoft-teams@master
        if: failure()
        with:
          webhook_url: ${{ secrets.MSTEAMS_WEBHOOK }}
          needs: ${{ toJson(needs) }}
          job: ${{ toJson(job) }}
          steps: ${{ toJson(steps) }}        
          dry_run: False